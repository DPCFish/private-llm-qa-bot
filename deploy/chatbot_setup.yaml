AWSTemplateFormatVersion: 2010-09-09
Outputs:
  SpammerApp:
    Value: !Ref "AWS::AccountId"
Parameters:
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64'
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: m5.large
  SSHLocation:
    Description: The IP address range that can be used to SSH in but not a public address and different from VpcCIDR
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: "Chatbot"
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16
  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.192.10.0/24
  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.192.11.0/24
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)
  
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  Bootstrapper:
    Type: 'AWS::EC2::Instance'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT1H1M1S
    Properties:
      UserData:
        Fn::Base64: !Sub | 
          #!/bin/bash
          cd /home/ec2-user/
          logfile="/tmp/debug.log"
          echo "" > "$logfile"
          sudo yum update -y
          echo "\n[$?] sudo yum update -y" >> "$logfile"
          sudo yum update -y aws-cfn-bootstrap
          echo "\n[$?] yum update -y aws-cfn-bootstrap" >> "$logfile"
          sudo /opt/aws/bin/cfn-init -v --role chatbot_deploy_role --stack ${AWS::StackName} --resource Bootstrapper --region ${AWS::Region}
          echo "\n[$?] sudo /opt/aws/bin/cfn-init -v --role chatbot_deploy_role --stack ${AWS::StackName} --resource Bootstrapper --region ${AWS::Region}" >> "$logfile"
          aws iam create-service-linked-role --aws-service-name es.amazonaws.com
          sudo yum install -y git
          sudo yum update -y
          sudo curl --silent --location https://rpm.nodesource.com/setup_18.x | bash -
          sudo yum install -y nodejs --nogpgcheck
          sudo -u ec2-user git clone --recurse-submodules https://github.com/aws-samples/private-llm-qa-bot.git
          cd private-llm-qa-bot/deploy/
          sh gen_env.sh ${AWS::Region} ${AWS::AccountId}
          echo "\n[$?] sh gen_env.sh ${AWS::Region} ${AWS::AccountId}" >> "$logfile"
          sudo npm install -g npm@10.1.0
          sudo npm install -g aws-cdk-lib
          sudo npm install -g aws-cdk
          sudo yum install jq
          sudo npm install --global yarn
          sudo npm install
          sudo yum install -y docker
          sudo systemctl start docker
          cdk bootstrap
          echo "\n[$?] cdk bootstrap" >> "$logfile"
          sudo cdk synth
          echo "\n[$?] sudo cdk synth" >> "$logfile"
          sudo cdk deploy --require-approval never --all
          echo "\n[$?] cdk deploy --require-approval never --all" >> "$logfile"
          
          sudo /opt/aws/bin/cfn-signal -e $? --role chatbot_deploy_role --stack ${AWS::StackName} --resource Bootstrapper --region ${AWS::Region}
          echo "\n[$?] /opt/aws/bin/cfn-signal" >> "$logfile"

      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref RootInstanceProfile
      SecurityGroupIds:
        - !GetAtt "SSHOnlySecurityGroup.GroupId"
      ImageId: !Ref LatestAmiId
      SubnetId: !Ref PublicSubnet1
      Tags: 
        - Key: "Name"
          Value: "cdk_deployer"
  SSHOnlySecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: F1000
            reason: 'require all traffic for outbound to connect to external amazonlinux-2-repos, otherwise Timeout'
    Properties:
      GroupDescription: Restrict SSH access to SSHLocation
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation
      VpcId: !Ref VPC
      Tags: 
        - Key: "Name"
          Value: "cdk_deployer_sg"

  IAMPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: VisualEditor0
            Effect: Allow
            Action: iam:CreateServiceLinkedRole
            Resource: arn:aws:iam::*:role/aws-service-role/es.amazonaws.com/AWSServiceRoleForAmazonElasticsearchService
            Condition:
              StringLike:
                iam:AWSServiceName: es.amazonaws.com
          - Sid: VisualEditor1
            Effect: Allow
            Action:
              - iam:CreateServiceSpecificCredential
              - iam:DeactivateMFADevice
              - iam:GetAccountPasswordPolicy
              - iam:ListRoleTags
              - iam:UpdateCloudFrontPublicKey
              - iam:GenerateServiceLastAccessedDetails
              - iam:UpdateOpenIDConnectProviderThumbprint
              - iam:TagMFADevice
              - iam:ListServiceSpecificCredentials
              - iam:PutRolePolicy
              - iam:ListSigningCertificates
              - iam:AddRoleToInstanceProfile
              - iam:SetSecurityTokenServicePreferences
              - iam:SimulateCustomPolicy
              - iam:UploadSSHPublicKey
              - iam:DetachGroupPolicy
              - iam:ListRolePolicies
              - iam:GetCredentialReport
              - iam:PutGroupPolicy
              - iam:ListPolicies
              - iam:UpdateServiceSpecificCredential
              - iam:GetRole
              - iam:ListSAMLProviders
              - iam:GetPolicy
              - iam:RemoveClientIDFromOpenIDConnectProvider
              - iam:ListEntitiesForPolicy
              - iam:UpdateRoleDescription
              - iam:TagPolicy
              - iam:UploadCloudFrontPublicKey
              - iam:UpdateServerCertificate
              - iam:GetOpenIDConnectProvider
              - iam:GetRolePolicy
              - iam:CreateInstanceProfile
              - iam:GenerateCredentialReport
              - iam:UntagRole
              - iam:PutRolePermissionsBoundary
              - iam:TagRole
              - iam:ResetServiceSpecificCredential
              - iam:DeleteRolePermissionsBoundary
              - iam:GetServiceLastAccessedDetails
              - iam:GetServiceLinkedRoleDeletionStatus
              - iam:ListInstanceProfilesForRole
              - iam:PassRole
              - iam:EnableMFADevice
              - iam:ResyncMFADevice
              - iam:ListAttachedGroupPolicies
              - iam:ListPolicyTags
              - iam:UpdateSAMLProvider
              - iam:ListAccessKeys
              - iam:ListGroupPolicies
              - iam:ListCloudFrontPublicKeys
              - iam:GetSSHPublicKey
              - iam:PutUserPermissionsBoundary
              - iam:ListRoles
              - iam:GetContextKeysForCustomPolicy
              - iam:CreatePolicy
              - iam:CreateServiceLinkedRole
              - iam:AttachGroupPolicy
              - iam:ListServerCertificateTags
              - iam:PutUserPolicy
              - iam:TagServerCertificate
              - iam:ListAccountAliases
              - iam:UntagPolicy
              - iam:UpdateRole
              - iam:GetUser
              - iam:UntagOpenIDConnectProvider
              - iam:ListGroups
              - iam:AddClientIDToOpenIDConnectProvider
              - iam:UntagInstanceProfile
              - iam:TagOpenIDConnectProvider
              - iam:GetLoginProfile
              - iam:TagInstanceProfile
              - iam:SetDefaultPolicyVersion
              - iam:UpdateAssumeRolePolicy
              - iam:GetPolicyVersion
              - iam:GetMFADevice
              - iam:ListServerCertificates
              - iam:RemoveRoleFromInstanceProfile
              - iam:UpdateGroup
              - iam:CreateRole
              - iam:AttachRolePolicy
              - iam:SetSTSRegionalEndpointStatus
              - iam:TagSAMLProvider
              - iam:ListVirtualMFADevices
              - iam:CreateLoginProfile
              - iam:ListSSHPublicKeys
              - iam:DetachRolePolicy
              - iam:SimulatePrincipalPolicy
              - iam:GetAccountEmailAddress
              - iam:ListAttachedRolePolicies
              - iam:ListOpenIDConnectProviderTags
              - iam:CreateAccountAlias
              - iam:ListSAMLProviderTags
              - iam:DetachUserPolicy
              - iam:GetAccountAuthorizationDetails
              - iam:ChangePassword
              - iam:UpdateLoginProfile
              - iam:GetServerCertificate
              - iam:CreateGroup
              - iam:UntagSAMLProvider
              - iam:UpdateUser
              - iam:GetAccessKeyLastUsed
              - iam:AttachUserPolicy
              - iam:UpdateAccessKey
              - iam:UpdateSSHPublicKey
              - iam:UpdateAccountPasswordPolicy
              - iam:GetUserPolicy
              - iam:ListGroupsForUser
              - iam:GetAccountName
              - iam:GetGroupPolicy
              - iam:ListSTSRegionalEndpointsStatus
              - iam:GetAccountSummary
              - iam:GetServiceLastAccessedDetailsWithEntities
              - iam:ListPoliciesGrantingServiceAccess
              - iam:CreateSAMLProvider
              - iam:ListInstanceProfileTags
              - iam:CreateVirtualMFADevice
              - iam:ListMFADevices
              - iam:CreateUser
              - iam:GetGroup
              - iam:GetOrganizationsAccessReport
              - iam:CreateAccessKey
              - iam:GetContextKeysForPrincipalPolicy
              - iam:UpdateAccountName
              - iam:AddUserToGroup
              - iam:RemoveUserFromGroup
              - iam:GenerateOrganizationsAccessReport
              - iam:GetCloudFrontPublicKey
              - iam:ListAttachedUserPolicies
              - iam:UpdateAccountEmailAddress
              - iam:CreatePolicyVersion
              - iam:GetSAMLProvider
              - iam:UploadSigningCertificate
              - iam:GetInstanceProfile
              - iam:UntagServerCertificate
              - iam:ListUserPolicies
              - iam:ListInstanceProfiles
              - iam:TagUser
              - iam:CreateOpenIDConnectProvider
              - iam:UploadServerCertificate
              - iam:UntagUser
              - iam:ListPolicyVersions
              - iam:ListOpenIDConnectProviders
              - iam:UntagMFADevice
              - iam:ListUsers
              - iam:UpdateSigningCertificate
              - iam:ListMFADeviceTags
              - iam:ListUserTags
            Resource: '*'
          - Sid: VisualEditor2
            Effect: Allow
            Action: iam:PassRole
            Resource:
              - arn:aws:iam::*:role/cdk-readOnlyRole
              - arn:aws:iam::*:role/cdk-hnb659fds-deploy-role-*
              - arn:aws:iam::*:role/cdk-hnb659fds-file-publishing-*
              - arn:aws:iam::*:role/cdk-hnb659fds-image-publishing-role-*
          - Sid: VisualEditor3
            Effect: Allow
            Action: sts:AssumeRole
            Resource:
              - arn:aws:iam::*:role/cdk-readOnlyRole
              - arn:aws:iam::*:role/cdk-hnb659fds-deploy-role-*
              - arn:aws:iam::*:role/cdk-hnb659fds-file-publishing-*
              - arn:aws:iam::*:role/cdk-hnb659fds-image-publishing-role-*
          - Sid: VisualEditor4
            Effect: Allow
            Action: cloudformation:*
            Resource: !Sub 'arn:aws:cloudformation:${AWS::Region}:*:*'
          - Sid: VisualEditor5
            Effect: Allow
            Action: cloudformation:*
            Resource: !Sub 'arn:aws:cloudformation:${AWS::Region}:*:*'
          - Sid: VisualEditor6
            Effect: Allow
            Action: s3:*
            Resource: arn:aws:s3:::*
          - Sid: VisualEditor7
            Effect: Allow
            Action:
              - ecr:*
            Resource: !Sub 'arn:aws:ecr:${AWS::Region}:*:*'
          - Sid: VisualEditor8
            Effect: Allow
            Action: ssm:*
            Resource: !Sub 'arn:aws:ssm:${AWS::Region}:*:*'
          - Sid: VisualEditor9
            Effect: Allow
            Action: ec2:DescribeAvailabilityZones
            Resource: '*'
          - Sid: VisualEditor10
            Effect: Allow
            Action: dynamodb:PutItem
            Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/chatbotFE_user'

  RoleWithIAMPolicy:
    Type: AWS::IAM::Role
    Properties:
      RoleName: chatbot_deploy_role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - !Ref IAMPolicy

  RootInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref RoleWithIAMPolicy
