AWSTemplateFormatVersion: 2010-09-09
Parameters:
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64'
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: m5.large
  SSHLocation:
    Description: The IP address range that can be used to SSH in but not a public address and different from VpcCIDR
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: "Chatbot"
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16
  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.192.10.0/24
  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.192.11.0/24
  TrustedAccounts:
    Description: List of AWS accounts that are trusted to publish assets and deploy stacks to this environment
    Default: ""
    Type: CommaDelimitedList
  TrustedAccountsForLookup:
    Description: List of AWS accounts that are trusted to look up values in this environment
    Default: ""
    Type: CommaDelimitedList
  CloudFormationExecutionPolicies:
    Description: List of the ManagedPolicy ARN(s) to attach to the CloudFormation deployment role
    Default: ""
    Type: CommaDelimitedList
  FileAssetsBucketName:
    Description: The name of the S3 bucket used for file assets
    Default: ""
    Type: String
  FileAssetsBucketKmsKeyId:
    Description: Empty to create a new key (default), 'AWS_MANAGED_KEY' to use a managed S3 key, or the ID/ARN of an existing key.
    Default: ""
    Type: String
  ContainerAssetsRepositoryName:
    Description: A user-provided custom name to use for the container assets ECR repository
    Default: ""
    Type: String
  Qualifier:
    Description: An identifier to distinguish multiple bootstrap stacks in the same environment
    Default: hnb659fds
    Type: String
    AllowedPattern: "[A-Za-z0-9_-]{1,10}"
    ConstraintDescription: Qualifier must be an alphanumeric identifier of at most 10 characters
  PublicAccessBlockConfiguration:
    Description: Whether or not to enable S3 Staging Bucket Public Access Block Configuration
    Default: "true"
    Type: String
    AllowedValues:
      - "true"
      - "false"
  InputPermissionsBoundary:
    Description: Whether or not to use either the CDK supplied or custom permissions boundary
    Default: ""
    Type: String
  UseExamplePermissionsBoundary:
    Default: "false"
    AllowedValues:
      - "true"
      - "false"
    Type: String
  BootstrapVariant:
    Type: String
    Default: "AWS CDK: Default Resources"
    Description: Describe the provenance of the resources in this bootstrap stack. Change this when you customize the template. To prevent accidents, the CDK CLI will not overwrite bootstrap stacks with a different variant.

Conditions:
  HasTrustedAccounts:
    Fn::Not:
      - Fn::Equals:
          - ""
          - Fn::Join:
              - ""
              - Ref: TrustedAccounts
  HasTrustedAccountsForLookup:
    Fn::Not:
      - Fn::Equals:
          - ""
          - Fn::Join:
              - ""
              - Ref: TrustedAccountsForLookup
  HasCloudFormationExecutionPolicies:
    Fn::Not:
      - Fn::Equals:
          - ""
          - Fn::Join:
              - ""
              - Ref: CloudFormationExecutionPolicies
  HasCustomFileAssetsBucketName:
    Fn::Not:
      - Fn::Equals:
          - ""
          - Ref: FileAssetsBucketName
  CreateNewKey:
    Fn::Equals:
      - ""
      - Ref: FileAssetsBucketKmsKeyId
  UseAwsManagedKey:
    Fn::Equals:
      - AWS_MANAGED_KEY
      - Ref: FileAssetsBucketKmsKeyId
  ShouldCreatePermissionsBoundary:
    Fn::Equals:
      - "true"
      - Ref: UseExamplePermissionsBoundary
  PermissionsBoundarySet:
    Fn::Not:
      - Fn::Equals:
          - ""
          - Ref: InputPermissionsBoundary
  HasCustomContainerAssetsRepositoryName:
    Fn::Not:
      - Fn::Equals:
          - ""
          - Ref: ContainerAssetsRepositoryName
  UsePublicAccessBlockConfiguration:
    Fn::Equals:
      - "true"
      - Ref: PublicAccessBlockConfiguration
Resources:
  FileAssetsBucketEncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      KeyPolicy:
        Statement:
          - Action:
              - kms:Create*
              - kms:Describe*
              - kms:Enable*
              - kms:List*
              - kms:Put*
              - kms:Update*
              - kms:Revoke*
              - kms:Disable*
              - kms:Get*
              - kms:Delete*
              - kms:ScheduleKeyDeletion
              - kms:CancelKeyDeletion
              - kms:GenerateDataKey
              - kms:TagResource
              - kms:UntagResource
            Effect: Allow
            Principal:
              AWS:
                Ref: AWS::AccountId
            Resource: "*"
          - Action:
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
            Effect: Allow
            Principal:
              AWS: "*"
            Resource: "*"
            Condition:
              StringEquals:
                kms:CallerAccount:
                  Ref: AWS::AccountId
                kms:ViaService:
                  - Fn::Sub: s3.${AWS::Region}.amazonaws.com
          - Action:
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
            Effect: Allow
            Principal:
              AWS:
                Fn::Sub: ${FilePublishingRole.Arn}
            Resource: "*"
    Condition: CreateNewKey
  FileAssetsBucketEncryptionKeyAlias:
    Condition: CreateNewKey
    Type: AWS::KMS::Alias
    Properties:
      AliasName:
        Fn::Sub: alias/cdk-${Qualifier}-assets-key
      TargetKeyId:
        Ref: FileAssetsBucketEncryptionKey
  StagingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::If:
          - HasCustomFileAssetsBucketName
          - Fn::Sub: ${FileAssetsBucketName}
          - Fn::Sub: cdk-${Qualifier}-assets-${AWS::AccountId}-${AWS::Region}
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID:
                Fn::If:
                  - CreateNewKey
                  - Fn::Sub: ${FileAssetsBucketEncryptionKey.Arn}
                  - Fn::If:
                      - UseAwsManagedKey
                      - Ref: AWS::NoValue
                      - Fn::Sub: ${FileAssetsBucketKmsKeyId}
      PublicAccessBlockConfiguration:
        Fn::If:
          - UsePublicAccessBlockConfiguration
          - BlockPublicAcls: true
            BlockPublicPolicy: true
            IgnorePublicAcls: true
            RestrictPublicBuckets: true
          - Ref: AWS::NoValue
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: CleanupOldVersions
            Status: Enabled
            NoncurrentVersionExpiration:
              NoncurrentDays: 365
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
  StagingBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: StagingBucket
      PolicyDocument:
        Id: AccessControl
        Version: "2012-10-17"
        Statement:
          - Sid: AllowSSLRequestsOnly
            Action: s3:*
            Effect: Deny
            Resource:
              - Fn::Sub: ${StagingBucket.Arn}
              - Fn::Sub: ${StagingBucket.Arn}/*
            Condition:
              Bool:
                aws:SecureTransport: "false"
            Principal: "*"
  ContainerAssetsRepository:
    Type: AWS::ECR::Repository
    Properties:
      ImageTagMutability: IMMUTABLE
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Untagged images should not exist, but expire any older than one year",
                "selection": {
                  "tagStatus": "untagged",
                  "countType": "sinceImagePushed",
                  "countUnit": "days",
                  "countNumber": 365
                },
                "action": { "type": "expire" }
              }
            ]
          }
      RepositoryName:
        Fn::If:
          - HasCustomContainerAssetsRepositoryName
          - Fn::Sub: ${ContainerAssetsRepositoryName}
          - Fn::Sub: cdk-${Qualifier}-container-assets-${AWS::AccountId}-${AWS::Region}
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          - Sid: LambdaECRImageRetrievalPolicy
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - ecr:BatchGetImage
              - ecr:GetDownloadUrlForLayer
            Condition:
              StringLike:
                aws:sourceArn:
                  Fn::Sub: arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:*
  FilePublishingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              AWS:
                Ref: AWS::AccountId
          - Fn::If:
              - HasTrustedAccounts
              - Action: sts:AssumeRole
                Effect: Allow
                Principal:
                  AWS:
                    Ref: TrustedAccounts
              - Ref: AWS::NoValue
      RoleName:
        Fn::Sub: cdk-${Qualifier}-file-publishing-role-${AWS::AccountId}-${AWS::Region}
      Tags:
        - Key: aws-cdk:bootstrap-role
          Value: file-publishing
  ImagePublishingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              AWS:
                Ref: AWS::AccountId
          - Fn::If:
              - HasTrustedAccounts
              - Action: sts:AssumeRole
                Effect: Allow
                Principal:
                  AWS:
                    Ref: TrustedAccounts
              - Ref: AWS::NoValue
      RoleName:
        Fn::Sub: cdk-${Qualifier}-image-publishing-role-${AWS::AccountId}-${AWS::Region}
      Tags:
        - Key: aws-cdk:bootstrap-role
          Value: image-publishing
  LookupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              AWS:
                Ref: AWS::AccountId
          - Fn::If:
              - HasTrustedAccountsForLookup
              - Action: sts:AssumeRole
                Effect: Allow
                Principal:
                  AWS:
                    Ref: TrustedAccountsForLookup
              - Ref: AWS::NoValue
          - Fn::If:
              - HasTrustedAccounts
              - Action: sts:AssumeRole
                Effect: Allow
                Principal:
                  AWS:
                    Ref: TrustedAccounts
              - Ref: AWS::NoValue
      RoleName:
        Fn::Sub: cdk-${Qualifier}-lookup-role-${AWS::AccountId}-${AWS::Region}
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/ReadOnlyAccess
      Policies:
        - PolicyDocument:
            Statement:
              - Sid: DontReadSecrets
                Effect: Deny
                Action:
                  - kms:Decrypt
                Resource: "*"
            Version: "2012-10-17"
          PolicyName: LookupRolePolicy
      Tags:
        - Key: aws-cdk:bootstrap-role
          Value: lookup
  FilePublishingRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject*
              - s3:GetBucket*
              - s3:GetEncryptionConfiguration
              - s3:List*
              - s3:DeleteObject*
              - s3:PutObject*
              - s3:Abort*
            Resource:
              - Fn::Sub: ${StagingBucket.Arn}
              - Fn::Sub: ${StagingBucket.Arn}/*
            Effect: Allow
          - Action:
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
            Effect: Allow
            Resource:
              Fn::If:
                - CreateNewKey
                - Fn::Sub: ${FileAssetsBucketEncryptionKey.Arn}
                - Fn::Sub: arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/${FileAssetsBucketKmsKeyId}
        Version: "2012-10-17"
      Roles:
        - Ref: FilePublishingRole
      PolicyName:
        Fn::Sub: cdk-${Qualifier}-file-publishing-role-default-policy-${AWS::AccountId}-${AWS::Region}
  ImagePublishingRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecr:PutImage
              - ecr:InitiateLayerUpload
              - ecr:UploadLayerPart
              - ecr:CompleteLayerUpload
              - ecr:BatchCheckLayerAvailability
              - ecr:DescribeRepositories
              - ecr:DescribeImages
              - ecr:BatchGetImage
              - ecr:GetDownloadUrlForLayer
            Resource:
              Fn::Sub: ${ContainerAssetsRepository.Arn}
            Effect: Allow
          - Action:
              - ecr:GetAuthorizationToken
            Resource: "*"
            Effect: Allow
        Version: "2012-10-17"
      Roles:
        - Ref: ImagePublishingRole
      PolicyName:
        Fn::Sub: cdk-${Qualifier}-image-publishing-role-default-policy-${AWS::AccountId}-${AWS::Region}
  DeploymentActionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              AWS:
                Ref: AWS::AccountId
          - Fn::If:
              - HasTrustedAccounts
              - Action: sts:AssumeRole
                Effect: Allow
                Principal:
                  AWS:
                    Ref: TrustedAccounts
              - Ref: AWS::NoValue
      Policies:
        - PolicyDocument:
            Statement:
              - Sid: CloudFormationPermissions
                Effect: Allow
                Action:
                  - cloudformation:CreateChangeSet
                  - cloudformation:DeleteChangeSet
                  - cloudformation:DescribeChangeSet
                  - cloudformation:DescribeStacks
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:CreateStack
                  - cloudformation:UpdateStack
                Resource: "*"
              - Sid: PipelineCrossAccountArtifactsBucket
                Effect: Allow
                Action:
                  - s3:GetObject*
                  - s3:GetBucket*
                  - s3:List*
                  - s3:Abort*
                  - s3:DeleteObject*
                  - s3:PutObject*
                Resource: "*"
                Condition:
                  StringNotEquals:
                    s3:ResourceAccount:
                      Ref: AWS::AccountId
              - Sid: PipelineCrossAccountArtifactsKey
                Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:DescribeKey
                  - kms:Encrypt
                  - kms:ReEncrypt*
                  - kms:GenerateDataKey*
                Resource: "*"
                Condition:
                  StringEquals:
                    kms:ViaService:
                      Fn::Sub: s3.${AWS::Region}.amazonaws.com
              - Action: iam:PassRole
                Resource:
                  Fn::Sub: ${CloudFormationExecutionRole.Arn}
                Effect: Allow
              - Sid: CliPermissions
                Action:
                  - cloudformation:DescribeStackEvents
                  - cloudformation:GetTemplate
                  - cloudformation:DeleteStack
                  - cloudformation:UpdateTerminationProtection
                  - sts:GetCallerIdentity
                  - cloudformation:GetTemplateSummary
                Resource: "*"
                Effect: Allow
              - Sid: CliStagingBucket
                Effect: Allow
                Action:
                  - s3:GetObject*
                  - s3:GetBucket*
                  - s3:List*
                Resource:
                  - Fn::Sub: ${StagingBucket.Arn}
                  - Fn::Sub: ${StagingBucket.Arn}/*
              - Sid: ReadVersion
                Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource:
                  - Fn::Sub: arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter${CdkBootstrapVersion}
            Version: "2012-10-17"
          PolicyName: default
      RoleName:
        Fn::Sub: cdk-${Qualifier}-deploy-role-${AWS::AccountId}-${AWS::Region}
      Tags:
        - Key: aws-cdk:bootstrap-role
          Value: deploy
  CloudFormationExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        Fn::If:
          - HasCloudFormationExecutionPolicies
          - Ref: CloudFormationExecutionPolicies
          - Fn::If:
              - HasTrustedAccounts
              - Ref: AWS::NoValue
              - - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/AdministratorAccess
      RoleName:
        Fn::Sub: cdk-${Qualifier}-cfn-exec-role-${AWS::AccountId}-${AWS::Region}
      PermissionsBoundary:
        Fn::If:
          - PermissionsBoundarySet
          - Fn::Sub: arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/${InputPermissionsBoundary}
          - Ref: AWS::NoValue
  CdkBoostrapPermissionsBoundaryPolicy:
    Condition: ShouldCreatePermissionsBoundary
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Sid: ExplicitAllowAll
            Action:
              - "*"
            Effect: Allow
            Resource: "*"
          - Sid: DenyAccessIfRequiredPermBoundaryIsNotBeingApplied
            Action:
              - iam:CreateUser
              - iam:CreateRole
              - iam:PutRolePermissionsBoundary
              - iam:PutUserPermissionsBoundary
            Condition:
              StringNotEquals:
                iam:PermissionsBoundary:
                  Fn::Sub: arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/cdk-${Qualifier}-permissions-boundary-${AWS::AccountId}-${AWS::Region}
            Effect: Deny
            Resource: "*"
          - Sid: DenyPermBoundaryIAMPolicyAlteration
            Action:
              - iam:CreatePolicyVersion
              - iam:DeletePolicy
              - iam:DeletePolicyVersion
              - iam:SetDefaultPolicyVersion
            Effect: Deny
            Resource:
              Fn::Sub: arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/cdk-${Qualifier}-permissions-boundary-${AWS::AccountId}-${AWS::Region}
          - Sid: DenyRemovalOfPermBoundaryFromAnyUserOrRole
            Action:
              - iam:DeleteUserPermissionsBoundary
              - iam:DeleteRolePermissionsBoundary
            Effect: Deny
            Resource: "*"
        Version: "2012-10-17"
      Description: Bootstrap Permission Boundary
      ManagedPolicyName:
        Fn::Sub: cdk-${Qualifier}-permissions-boundary-${AWS::AccountId}-${AWS::Region}
      Path: /
  CdkBootstrapVersion:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name:
        Fn::Sub: /cdk-bootstrap/${Qualifier}/version
      Value: "18"

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)
  
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  VolumeSize:
    Description: EBS volume size (GB) for the instance
    Type: Number
    MinValue: 20
    Default: 20

  ec2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: 'chatbotaosproxyec2'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'
        - 'arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess'
      Policies:
        - PolicyName: CustomPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 'lambda:GetFunctionConfiguration'
                Resource: '*'
    DeletionPolicy: Delete

  Bootstrapper:
    Type: 'AWS::EC2::Instance'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT1H1M1S
    Properties:
      UserData:
        Fn::Base64: !Sub | 
          #!/bin/bash
          cd /home/ec2-user/
          logfile="/tmp/debug.log"
          echo "" > "$logfile"
          sudo yum update -y
          echo "\n[$?] sudo yum update -y" >> "$logfile"
          sudo yum update -y aws-cfn-bootstrap
          echo "\n[$?] yum update -y aws-cfn-bootstrap" >> "$logfile"
          sudo /opt/aws/bin/cfn-init -v --role chatbot_deploy_role --stack ${AWS::StackName} --resource Bootstrapper --region ${AWS::Region}
          echo "\n[$?] sudo /opt/aws/bin/cfn-init -v --role chatbot_deploy_role --stack ${AWS::StackName} --resource Bootstrapper --region ${AWS::Region}" >> "$logfile"
          sudo yum install -y git
          sudo yum update -y
          sudo curl --silent --location https://rpm.nodesource.com/setup_18.x | bash -
          sudo yum install -y nodejs --nogpgcheck
          sudo -u ec2-user git clone --recurse-submodules https://github.com/aws-samples/private-llm-qa-bot.git -b main_dev
          cd private-llm-qa-bot/deploy/
          sh gen_env.sh ${AWS::Region} ${AWS::AccountId}
          echo "\n[$?] sh gen_env.sh ${AWS::Region} ${AWS::AccountId}" >> "$logfile"
          sudo npm install -g npm@10.1.0
          sudo npm install -g aws-cdk-lib
          sudo npm install -g aws-cdk
          sudo yum install jq
          sudo npm install --global yarn
          sudo npm install
          sudo yum install -y docker
          sudo systemctl start docker
          sudo cdk synth
          echo "\n[$?] sudo cdk synth" >> "$logfile"
          sudo cdk deploy --require-approval never --all
          echo "\n[$?] cdk deploy --require-approval never --all" >> "$logfile"
          
          sudo /opt/aws/bin/cfn-signal -e $? --role chatbot_deploy_role --stack ${AWS::StackName} --resource Bootstrapper --region ${AWS::Region}
          echo "\n[$?] /opt/aws/bin/cfn-signal" >> "$logfile"

      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref RootInstanceProfile
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: !Ref 'VolumeSize'
            VolumeType: gp3
      SecurityGroupIds:
        - !GetAtt "SSHOnlySecurityGroup.GroupId"
      ImageId: !Ref LatestAmiId
      SubnetId: !Ref PublicSubnet1
      Tags: 
        - Key: "Name"
          Value: "cdk_deployer"
  SSHOnlySecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: F1000
            reason: 'require all traffic for outbound to connect to external amazonlinux-2-repos, otherwise Timeout'
    Properties:
      GroupDescription: Restrict SSH access to SSHLocation
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp  
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC
      Tags: 
        - Key: "Name"
          Value: "cdk_deployer_sg"

  IAMPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: VisualEditor0
            Effect: Allow
            Action: iam:CreateServiceLinkedRole
            Resource: arn:aws:iam::*:role/aws-service-role/es.amazonaws.com/AWSServiceRoleForAmazonElasticsearchService
            Condition:
              StringLike:
                iam:AWSServiceName: es.amazonaws.com
          - Sid: VisualEditor1
            Effect: Allow
            Action:
              - iam:CreateServiceSpecificCredential
              - iam:DeactivateMFADevice
              - iam:GetAccountPasswordPolicy
              - iam:ListRoleTags
              - iam:UpdateCloudFrontPublicKey
              - iam:GenerateServiceLastAccessedDetails
              - iam:UpdateOpenIDConnectProviderThumbprint
              - iam:TagMFADevice
              - iam:ListServiceSpecificCredentials
              - iam:PutRolePolicy
              - iam:ListSigningCertificates
              - iam:AddRoleToInstanceProfile
              - iam:SetSecurityTokenServicePreferences
              - iam:SimulateCustomPolicy
              - iam:UploadSSHPublicKey
              - iam:DetachGroupPolicy
              - iam:ListRolePolicies
              - iam:GetCredentialReport
              - iam:PutGroupPolicy
              - iam:ListPolicies
              - iam:UpdateServiceSpecificCredential
              - iam:GetRole
              - iam:ListSAMLProviders
              - iam:GetPolicy
              - iam:RemoveClientIDFromOpenIDConnectProvider
              - iam:ListEntitiesForPolicy
              - iam:UpdateRoleDescription
              - iam:TagPolicy
              - iam:UploadCloudFrontPublicKey
              - iam:UpdateServerCertificate
              - iam:GetOpenIDConnectProvider
              - iam:GetRolePolicy
              - iam:CreateInstanceProfile
              - iam:GenerateCredentialReport
              - iam:UntagRole
              - iam:PutRolePermissionsBoundary
              - iam:TagRole
              - iam:ResetServiceSpecificCredential
              - iam:DeleteRolePermissionsBoundary
              - iam:GetServiceLastAccessedDetails
              - iam:GetServiceLinkedRoleDeletionStatus
              - iam:ListInstanceProfilesForRole
              - iam:PassRole
              - iam:EnableMFADevice
              - iam:ResyncMFADevice
              - iam:ListAttachedGroupPolicies
              - iam:ListPolicyTags
              - iam:UpdateSAMLProvider
              - iam:ListAccessKeys
              - iam:ListGroupPolicies
              - iam:ListCloudFrontPublicKeys
              - iam:GetSSHPublicKey
              - iam:PutUserPermissionsBoundary
              - iam:ListRoles
              - iam:GetContextKeysForCustomPolicy
              - iam:CreatePolicy
              - iam:CreateServiceLinkedRole
              - iam:AttachGroupPolicy
              - iam:ListServerCertificateTags
              - iam:PutUserPolicy
              - iam:TagServerCertificate
              - iam:ListAccountAliases
              - iam:UntagPolicy
              - iam:UpdateRole
              - iam:GetUser
              - iam:UntagOpenIDConnectProvider
              - iam:ListGroups
              - iam:AddClientIDToOpenIDConnectProvider
              - iam:UntagInstanceProfile
              - iam:TagOpenIDConnectProvider
              - iam:GetLoginProfile
              - iam:TagInstanceProfile
              - iam:SetDefaultPolicyVersion
              - iam:UpdateAssumeRolePolicy
              - iam:GetPolicyVersion
              - iam:GetMFADevice
              - iam:ListServerCertificates
              - iam:RemoveRoleFromInstanceProfile
              # - iam:UpdateGroup
              # - iam:CreateRole
              - iam:AttachRolePolicy
              - iam:SetSTSRegionalEndpointStatus
              - iam:TagSAMLProvider
              - iam:ListVirtualMFADevices
              - iam:CreateLoginProfile
              - iam:ListSSHPublicKeys
              - iam:DetachRolePolicy
              - iam:SimulatePrincipalPolicy
              - iam:GetAccountEmailAddress
              - iam:ListAttachedRolePolicies
              - iam:ListOpenIDConnectProviderTags
              - iam:CreateAccountAlias
              - iam:ListSAMLProviderTags
              - iam:DetachUserPolicy
              - iam:GetAccountAuthorizationDetails
              - iam:ChangePassword
              - iam:UpdateLoginProfile
              - iam:GetServerCertificate
              # - iam:CreateGroup
              - iam:UntagSAMLProvider
              # - iam:UpdateUser
              - iam:GetAccessKeyLastUsed
              - iam:AttachUserPolicy
              - iam:UpdateAccessKey
              - iam:UpdateSSHPublicKey
              - iam:UpdateAccountPasswordPolicy
              - iam:GetUserPolicy
              - iam:ListGroupsForUser
              - iam:GetAccountName
              - iam:GetGroupPolicy
              - iam:ListSTSRegionalEndpointsStatus
              - iam:GetAccountSummary
              - iam:GetServiceLastAccessedDetailsWithEntities
              - iam:ListPoliciesGrantingServiceAccess
              - iam:CreateSAMLProvider
              - iam:ListInstanceProfileTags
              - iam:CreateVirtualMFADevice
              - iam:ListMFADevices
              # - iam:CreateUser
              - iam:GetGroup
              - iam:GetOrganizationsAccessReport
              - iam:CreateAccessKey
              - iam:GetContextKeysForPrincipalPolicy
              - iam:UpdateAccountName
              - iam:AddUserToGroup
              - iam:RemoveUserFromGroup
              - iam:GenerateOrganizationsAccessReport
              - iam:GetCloudFrontPublicKey
              - iam:ListAttachedUserPolicies
              - iam:UpdateAccountEmailAddress
              - iam:CreatePolicyVersion
              - iam:GetSAMLProvider
              - iam:UploadSigningCertificate
              - iam:GetInstanceProfile
              - iam:UntagServerCertificate
              - iam:ListUserPolicies
              - iam:ListInstanceProfiles
              - iam:TagUser
              - iam:CreateOpenIDConnectProvider
              - iam:UploadServerCertificate
              - iam:UntagUser
              - iam:ListPolicyVersions
              - iam:ListOpenIDConnectProviders
              - iam:UntagMFADevice
              - iam:ListUsers
              - iam:UpdateSigningCertificate
              - iam:ListMFADeviceTags
              - iam:ListUserTags
            Resource: '*'
          - Sid: VisualEditor2
            Effect: Allow
            Action: iam:PassRole
            Resource:
              - arn:aws:iam::*:role/cdk-readOnlyRole
              - arn:aws:iam::*:role/cdk-hnb659fds-deploy-role-*
              - arn:aws:iam::*:role/cdk-hnb659fds-file-publishing-*
              - arn:aws:iam::*:role/cdk-hnb659fds-image-publishing-role-*
          - Sid: VisualEditor3
            Effect: Allow
            Action: sts:AssumeRole
            Resource:
              - arn:aws:iam::*:role/cdk-readOnlyRole
              - arn:aws:iam::*:role/cdk-hnb659fds-deploy-role-*
              - arn:aws:iam::*:role/cdk-hnb659fds-file-publishing-*
              - arn:aws:iam::*:role/cdk-hnb659fds-image-publishing-role-*
          - Sid: VisualEditor4
            Effect: Allow
            Action: cloudformation:*
            Resource: !Sub 'arn:aws:cloudformation:${AWS::Region}:*:*'
          - Sid: VisualEditor5
            Effect: Allow
            Action: cloudformation:*
            Resource: !Sub 'arn:aws:cloudformation:${AWS::Region}:*:*'
          - Sid: VisualEditor6
            Effect: Allow
            Action: s3:*
            Resource: arn:aws:s3:::*
          - Sid: VisualEditor7
            Effect: Allow
            Action:
              - ecr:*
            Resource: !Sub 'arn:aws:ecr:${AWS::Region}:*:*'
          - Sid: VisualEditor8
            Effect: Allow
            Action: ssm:*
            Resource: !Sub 'arn:aws:ssm:${AWS::Region}:*:*'
          - Sid: VisualEditor9
            Effect: Allow
            Action: ec2:DescribeAvailabilityZones
            Resource: '*'
          - Sid: VisualEditor10
            Effect: Allow
            Action: dynamodb:PutItem
            Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/chatbotFE_user'
    DeletionPolicy: Delete

  RoleWithIAMPolicy:
    Type: AWS::IAM::Role
    Properties:
      RoleName: chatbot_deploy_role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - !Ref IAMPolicy
    DeletionPolicy: Delete

  RootInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref RoleWithIAMPolicy

Outputs:
  BucketName:
    Description: The name of the S3 bucket owned by the CDK toolkit stack
    Value:
      Fn::Sub: ${StagingBucket}
  BucketDomainName:
    Description: The domain name of the S3 bucket owned by the CDK toolkit stack
    Value:
      Fn::Sub: ${StagingBucket.RegionalDomainName}
  FileAssetKeyArn:
    Description: The ARN of the KMS key used to encrypt the asset bucket (deprecated)
    Value:
      Fn::If:
        - CreateNewKey
        - Fn::Sub: ${FileAssetsBucketEncryptionKey.Arn}
        - Fn::Sub: ${FileAssetsBucketKmsKeyId}
    Export:
      Name:
        Fn::Sub: CdkBootstrap-${Qualifier}-FileAssetKeyArn
  ImageRepositoryName:
    Description: The name of the ECR repository which hosts docker image assets
    Value:
      Fn::Sub: ${ContainerAssetsRepository}
  BootstrapVersion:
    Description: The version of the bootstrap resources that are currently mastered in this stack
    Value:
      Fn::GetAtt:
        - CdkBootstrapVersion
        - Value